<?php
// $Id: account_reminder.module,v 1.7.2.13 2009/07/28 07:25:47 jaydub Exp $

/**
 * Module by Computerminds http://www.computerminds.co.uk Jan 2007
 *
 * Upgraded to Drupal 5 with contributions from maartenvg
 * PostgreSQL support added by jaydub
 * Upgraded to Drupal 6 by jaydub
 *
 * This module is to remind users who have signed up a user account,
 * but have never signed in. It's driven by the cron job and can be
 * configured under "/admin/settings/account_reminder" .
 *
 */

/**
 * Implementation of hook_help().
 */
function account_reminder_help($path, $arg) {
  switch ($path) {
    case 'admin/help#account_reminder':
      $output = '<p>'. t('The account reminder module is designed to allow a site to communicate with users who have registered for an account at the site but have never logged in. If after a configurable number of days after a user registers the user has not yet logged in, this module will send them a reminder email. After a configurable number of days after the first reminder email if the user still has not logged in, a subsequent email reminder is sent. A cap to the number of reminder emails is also a configurable setting.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook perm().
 */
function account_reminder_perm() {
  return array("administer account reminder");
}

/**
 * Implementation of hook_menu().
 */
function account_reminder_menu() {
  $items = array();

  $items['admin/settings/account_reminder'] = array(
    'title' => 'Account Reminder',
    'description' => 'Settings of Account Reminder, sets reminder frequency and mail details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('account_reminder_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer account reminder'),
  );
  $items['account-reminder'] = array(
    'title' => 'Unsubscribe',
    'page callback' => 'account_reminder_unsubscribe',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * For the admin/settings/account_reminder page
 */
function account_reminder_settings() {
  $form = array();

  $form['frequency'] = array(
    '#type' => 'fieldset',
    '#title' => t('Reminder frequency'),
  );
  $form['frequency']['account_reminder_initial'] = array(
    '#type' => 'textfield',
    '#title' => t('Days till initial reminder'),
    '#description' => t('The time span (in days) between the user registering and the initial reminder being sent.'),
    '#default_value' => variable_get('account_reminder_initial', 10),
    '#size' => 10,
  );
  $form['frequency']['account_reminder_frequency'] = array(
    '#type' => 'textfield',
    '#title' => t('Days between reminders'),
    '#description' => t('The time (in days) between subsequent reminders.'),
    '#default_value' => variable_get('account_reminder_frequency', 14),
    '#size' => 10,
  );
  $form['frequency']['account_reminder_total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total number of reminders'),
    '#description' => t("Total number of reminders to send to a user if they have not logged in. If they do not login after the reminder has been sent out this many times, no further mails will be sent out."),
    '#default_value' => variable_get('account_reminder_total', 3),
    '#size' => 10,
  );
  $form['frequency']['account_reminder_cronlimit'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of reminders sent per cron run'),
    '#description' => t('The maximum number of account reminder emails sent per cron run. Enter 0 to send all account reminder emails.'),
    '#default_value' => variable_get('account_reminder_cronlimit', 100),
    '#size' => 10,
  );

  $form['mail'] = array(
    '#type' => 'fieldset',
    '#title' => t('Reminder email details'),
  );
  $form['mail']['account_reminder_bcc'] = array(
    '#type' => 'textfield',
    '#title' => t('Bcc email address'),
    '#description' => t('If you wish to receive a copy of all account reminder emails, enter an email address to Bcc.'),
    '#default_value' => variable_get('account_reminder_bcc', ''),
    '#size' => 40,
  );
  $form['mail']['account_reminder_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Email subject'),
    '#default_value' => _account_reminder_mail_text('account_reminder_subject'),
    '#description' => t('The subject of the account reminder email. Valid replacement variables are !site and !username'),
  );
  $form['mail']['account_reminder_msg'] = array(
    '#type' => 'textarea',
    '#title' => t('Email body'),
    '#default_value' => _account_reminder_mail_text('account_reminder_msg'),
    '#description' => t('Customize the body of the account reminder email. Valid variables are !site, !username, !login_uri, !login_url (the one time login link), !unsubscribe_url (A URL allowing users to opt-out of recieving the reminder emails) and !password.'),
  );

  return system_settings_form($form);
}

/**
 * module settings form validation
 */
function account_reminder_settings_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['account_reminder_initial'])) {
    form_set_error('account_reminder_initial', t('You must enter a number for "Days till initial reminder".'));
  }
  if (!is_numeric($form_state['values']['account_reminder_frequency'])) {
    form_set_error('account_reminder_frequency', t('You must enter a number for "Days between reminders".'));
  }
  if (!is_numeric($form_state['values']['account_reminder_total'])) {
    form_set_error('account_reminder_total', t('You must enter a number for "Total number of reminders".'));
  }
  if (!is_numeric($form_state['values']['account_reminder_cronlimit'])) {
    form_set_error('account_reminder_cronlimit', t('You must enter a number for "Number of reminders sent per cron run".'));
  }
  if (!empty($form_state['values']['account_reminder_bcc']) && !valid_email_address($form_state['values']['account_reminder_bcc'])) {
    form_set_error('account_reminder_bcc', t('You must enter a valid email address.'));
  }
}

/**
 * Implementation of hook_user().
 *
 * Delete the user from the account reminder table if the user is deleted
 */
function account_reminder_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    case 'delete':
      db_query('DELETE FROM {account_reminder} WHERE uid = %d', $user->uid);
      break;
  }
}

/**
 * Implementation of hook_cron().
 */
function account_reminder_cron() {
  // Remove users who have signed up from the reminder table...
  $result = db_query('DELETE FROM {account_reminder} WHERE uid IN (SELECT uid FROM {users} WHERE login <> 0 AND uid <> 0 AND status = 1)');

  $count = 0;
  $first_wait = variable_get('account_reminder_initial', 10);
  $period = variable_get('account_reminder_frequency', 14);
  $total_messages = variable_get('account_reminder_total', 3);
  $cronlimit = variable_get('account_reminder_cronlimit', 100);

  // Add users to the account_reminder table who are not already
  $result = db_query('SELECT u.*, COALESCE(ar.msg_cnt, 0) AS msg_cnt, COALESCE(ar.last_reminder, %d) AS last_reminder FROM {users} u LEFT JOIN {account_reminder} ar ON u.uid = ar.uid WHERE u.login = 0 AND u.uid <> 0 AND u.status = 1', time());
  while (($cronlimit == 0 || $count < $cronlimit) && $row = db_fetch_object($result)) {
    if ( ($row->msg_cnt == 0 && (($row->created + (86400 * $first_wait)) < time()))
      || (((int)((time() - $row->last_reminder) / 86400)) >= $period && ($row->msg_cnt >= 0 && ($row->msg_cnt < $total_messages))) ) {
      account_reminder_send_email($row);
      $row->last_reminder = time();
      if ($row->msg_cnt == 0) {
        $row->msg_cnt++;
        drupal_write_record('account_reminder', $row);
      }
      else {
        $row->msg_cnt++;
        drupal_write_record('account_reminder', $row, 'uid');
      }
      $count++;
    }
  }
}

/**
 * Implementation of hook_mail().
 */
function account_reminder_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = user_mail_tokens($params['user'], $language);
  $variables += array(
    '!password' => $params['context']['pass'],
    '!unsubscribe_url' => $params['context']['unsubscribe_url'],
  );

  $subject = strtr($params['context']['subject'], $variables);
  $body = strtr($params['context']['body'], $variables);
  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
  $message['body'][] = $body;
  if ($params['headers']['Bcc']) {
    $message['headers']['Bcc'] = $params['headers']['Bcc'];
  }
}

/**
 * Produce the URL for users to "just say no"
 */
function account_reminder_unsubscribe_url($user) {
  return url('account-reminder/'. $user->uid .'/'. md5($user->uid . $user->pass), array('absolute' => TRUE));
}

/**
 * This user does not want us spamming them any more!
 */
function account_reminder_unsubscribe($uid, $hash) {
  $account = user_load(array('uid' => $uid));
  if ($hash == md5($uid . $account->pass)) {
    db_query("UPDATE {account_reminder} SET msg_cnt = -1 WHERE uid = %d", $uid);
    drupal_set_message(t('Account reminder emails successfully cancelled'));
    drupal_goto();
  }
  else{
    drupal_set_message(t("invalid account reminder email unsubscription URL"));
    drupal_goto();
  }
}

/**
 * Sends the email out.
 */
function account_reminder_send_email($user) {
  $context = $headers = array();

  // Assign the user a new password because we do not know the old one!!!
  $pass = user_password();
  user_save($user, array('pass' => $pass));
  $user->pass = md5($pass);
  $context['pass'] = $pass;

  $context['unsubscribe_url'] = account_reminder_unsubscribe_url($user);
  $context['subject'] = _account_reminder_mail_text('account_reminder_subject');
  $context['body'] = _account_reminder_mail_text('account_reminder_msg');

  $bcc = variable_get('account_reminder_bcc', '');
  if ($bcc) {
    $headers['Bcc'] = $bcc;
  }

  $params = array('user' => $user, 'context' => $context, 'headers' => $headers);
  $message = drupal_mail('account_reminder', 'account_reminder_email', $user->mail, user_preferred_language($user), $params);
  if ($message['result']) {
    watchdog("account_reminder", 'Reminder email sent to %user at %email.', array('%user' => $user->name, '%email' => $user->mail));
  }
}

/**
 * Returns an email subject or body string.
 *
 * Used by account_reminder_send_mail() and the settings forms to retrieve strings.
 */
function _account_reminder_mail_text($key, $language = NULL, $variables = array()) {
  $langcode = isset($language) ? $language->language : NULL;
  if ($default_text = variable_get($key, FALSE)) {
    return strtr($default_text, $variables);
  }
  else {
    switch ($key) {
      case 'account_reminder_subject':
        return t('Account details for !username at !site', $variables, $langcode);
        break;
      case 'account_reminder_msg':
        return t('!username,

This is a reminder from !site. You have registered for a user account but have not yet validated your email address. To fully activate your account at !login_uri login using the following username and password:

username: !username
password: !password

You may also log in by clicking on this link or copying and pasting it in your browser:

!login_url

This is a one-time login, so it can be used only once.


--  !site team

You can stop receiving these reminder emails by either activating your account, or using the unsubscribe link below:

!unsubscribe_url', $variables, $langcode);
        break;
    }
  }
}
