<?php
// $Id: smsbulk.module,v 1.1.2.3 2009/06/30 11:12:24 gunzip Exp $

/**
 * @file
 *
 *  SMS bulk sender module: mass send sms to numbers
 */

define('SMSBULK_MAX_CHARS', 140);
define('SMSBULK_PREFIX', 'sms-');

// function sms_mass_send_init() {
//   actions_synchronize(FALSE, TRUE);
// }

/**
 * Implementation of hook_perm().
 *  sending rights depend from view bulk operation rights
 */
function smsbulk_perm() {
  return array('administer sms bulk');
}

/**
 * Implementation of hook_help().
 */
function smsbulk_help($section) {
  switch ($section) {
    case 'admin/settings/smsbulk':
      return  t('Send (tokenized) SMS to numbers obtained with views bulk operations module.
        Create a view with display type "bulk operation" with a field which is the destination mobile number
        and some auxiliary fields for tokens (eventually). Access the view, select the recipients (numbers),
        write the SMS text, click \'Send\'.
      ');
  }
}

/**
 * Implementation of hook_menu().
 */
function smsbulk_menu() {
  $items['admin/settings/smsbulk'] = array(
    'title' => t('SMS Bulk sender'),
    'description' => t('SMS Bulk sender settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smsbulk_admin'),
    'access arguments' => array('administer sms bulk'),
  );
  return $items;
}

function smsbulk_admin() {
  $form['smsbulk']['smsbulk_max_chars'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('smsbulk_max_chars', SMSBULK_MAX_CHARS),
    '#size' => 3,
    '#title' => t('SMS max chars'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_action_info().
 */
function smsbulk_action_info() {
  return array(
    'smsbulk_send_sms_to_content_action' => array(
      'description' => t('Send SMS to contact list'),
      'type' => 'node',
      'configurable' => TRUE,
      'behavior' => array('views_node_property'),
    ),
    'smsbulk_send_sms_to_user_action' => array(
      'description' => t('Send SMS to drupal users'),
      'type' => 'user',
      'configurable' => TRUE,
    ),
    'smsbulk_send_sms_to_civicrm_contact_action' => array(
      'description' => t('Send SMS to civicrm contacts'),
      'type' => 'civicrm_contact',
      'configurable' => TRUE,
    ),
  );
}

function sms_bulk_get_gateway_options() {
  $form = array();
  $gateway = sms_default_gateway();
  if (function_exists($gateway['send form'])) {
    $form['gateway']['#tree'] = TRUE;
    $form['gateway'] = array_merge($gateway['send form'](FALSE), $form['gateway']);
  }
  return $form;
}

function _send_sms_action_form($context) {
  $limit = variable_get('smsbulk_max_chars', SMSBULK_MAX_CHARS);
  drupal_add_js(drupal_get_path('module', 'smsbulk') .'/smsbulk.js');
  $options = array(t('- select -'));
  $view = views_get_current_view();
  foreach ($view->field as $field) {
    $options += array($field->field_alias => $field->options['label']);
  }
  $form['sms_field'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Number field'),
    '#description' => t('Select the field that acts as mobile phone number'),
    '#required' => TRUE,
  );
  $form['sms_text'] = array(
    '#type'  => 'textarea',
    '#title' => 'SMS Text',
    '#required' => TRUE,
  );
  $form['sms_limit'] = array(
    '#type'   => 'markup',
    '#prefix' => '<div id="keystrokes" class="description" limit="'. $limit .'"><span></span>',
    '#value'  => t('@max chars max', array('@max' => $limit)),
    '#suffix' => ' ('. t('if you are using tokens then this value is just a hint') .')</div>',
  );

  $form += sms_bulk_get_gateway_options();

  if (module_exists('token')) {
    $form['view']['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['view']['token_help']['help'] = array(
      '#value' => theme('token_help', 'smsbulk_row'),
    );
  }
  return $form;
}

function _send_sms_action_validate($form, $form_state) {
  if (empty($form_state['values']['sms_field'])) {
    form_set_error('sms_field', t('This field is required'));
  }
}

function _send_sms_action_submit($form, $form_state) {
  return array(
    'sms_text'          => $form_state['values']['sms_text'],
    'sms_field'         => $form_state['values']['sms_field'],
    'gateway_options'   => $form_state['values']['gateway'],
  );
}

function _smsbulk_send(&$object, &$context, $oid) {
  if (empty($context['view'])) {
    drupal_set_message(t('View was empty.'), 'error');
    return ;
  }
  $rows = &_smsbulk_get_rows($context['view'], $oid);
  if (empty($rows)) {
    drupal_set_message(t('You must select at least one row.'), 'error');
    return ;
  }
  foreach ($rows as $row) {
    $ret    = FALSE;
    $error  = FALSE;
    $number = $row->{$context['sms_field']};
    if (empty($number)) {
      $error = t('skipping empty number');
    }
    else {
      /*
       * hook_smsbulk_number_validate()
       *  return FALSE if you want to skip this number
       *
       *  hint: smsframework module already has per gateway validation hooks
       */
      foreach (module_implements('smsbulk_validate_number') as $module) {
        $function = $module .'_smsbulk_validate_number';
        $saved_number = $number;
        $number = $function($number);
        if ($number == FALSE) {
          $error = t('skipping malformed number (%number) [%module]',
              array('%number' => $saved_number, '%module' => $module));
          break;
        }
      }
    }
    if (!empty($number)) {
      if (sms_validate_number($number)) {
        $error = t('skipping malformed number (@number) [gateway]', array('@number' => $number));
      }
      else {
        if (module_exists('token')) {
          $sms_text = token_replace($context['sms_text'], 'smsbulk_row', $row);
        }
        else {
          $sms_text = $context['sms_text'];
        }
        $len = drupal_strlen($sms_text);
        if ($len > variable_get('smsbulk_max_chars', SMSBULK_MAX_CHARS)) {
          $error = t('skipping SMS too long (@text) [length=@len]',
              array('@text' => $sms_text, '@len' => $len));
        }
        else {
          $ret = sms_send($number, $sms_text, $context['gateway_options']);
          if ($ret == FALSE) {
            $error = t('error from smsframework/gateway');
          }
        }
      }
    }
    /*
     * hook_smsbulk_sms_sent()
     *  useful if you want to do stuff after the message is sent
     *
     *  hint: errors logging is already implemented into the smsframework
     */
    $params = array(
      'row'     => $row,
      'oid'     => $oid,
      'number'  => $number,
      'text'    => $sms_text,
      'success' => (empty($error) ? $ret : FALSE),
      'error'   => $error
    );
    module_invoke_all('smsbulk_sms_sent', $params);
    unset($row);
  }
}

/*
 * CONTENT TYPE (ie. contact lists from node with cck number field)
 */
function smsbulk_send_sms_to_content_action(&$object, $context = array()) {
  return _smsbulk_send($object, $context, $object->nid);
}

function smsbulk_send_sms_to_content_action_form($context) {
  return _send_sms_action_form($context);
}

function smsbulk_send_sms_to_content_action_validate($form, $form_state) {
  return _send_sms_action_validate($form, $form_state);
}

function smsbulk_send_sms_to_content_action_submit($form, $form_state) {
  return _send_sms_action_submit($form, $form_state);
}

/*
 * DRUPAL USERS
 */
function smsbulk_send_sms_to_user_action(&$object, $context = array()) {
  return _smsbulk_send($object, $context, $object->uid);
}

function smsbulk_send_sms_to_user_action_form($context) {
  return _send_sms_action_form($context);
}

function smsbulk_send_sms_to_user_action_validate($form, $form_state) {
  return _send_sms_action_validate($form, $form_state);
}

function smsbulk_send_sms_to_user_action_submit($form, $form_state) {
  return _send_sms_action_submit($form, $form_state);
}

/*
 * CIVICRM CONTACTS
 */
function smsbulk_send_sms_to_civicrm_contact_action(&$object, $context = array()) {
  return _smsbulk_send($object, $context, $object->contact_id);
}

function smsbulk_send_sms_to_civicrm_contact_action_form($context) {
  return _send_sms_action_form($context);
}

function smsbulk_send_sms_to_civicrm_contact_action_validate($form, $form_state) {
  return _send_sms_action_validate($form, $form_state);
}

function smsbulk_send_sms_to_civicrm_contact_action_submit($form, $form_state) {
  return _send_sms_action_submit($form, $form_state);
}

/**
 * Implementation of hook_views_bulk_operations_object_info().
 *  Add support for CiviCRM contacts
 */
function smsbulk_views_bulk_operations_object_info() {
  $info = array();
  if (module_exists('civicrm')) {
    $info = array(
      'civicrm_contact' => array(
        'type'        => 'civicrm_contact',
        'base_table'  => 'civicrm_contact',
        'load'        => '_smsbulk_civicrm_contact_load',
        'title'       => 'contact_id',
      ),
    );
  }
  return $info;
}

/*
 * No matter what we put here, we only need the contact_id
 * So just be fast and avoid loading contacts (or load it if you want the name)
 */
function _smsbulk_civicrm_contact_load($cid) {
  $contact = new stdClass();
  $contact->contact_id = $cid;
//  if (!module_exists('civicrm')) {
//    return FALSE;
//  }
//  civicrm_initialize(TRUE);
//  require_once('api/v2/Contact.php');
//  $search  = array('contact_id' => $cid);
//  $contact = civicrm_contact_get($search);
//  if (civicrm_error($contact)) {
//    return FALSE;
//  }
  return $contact;
}

/*
 * Get ALL results from the view (if you have a decent memory limit).
 * This is a must since views_bulk_operations doesn't pass the actual result to the action hook
 */
function _smsbulk_get_rows(&$view, $oid) {
  static $results = NULL;
  if ($results == NULL) {
    $results = array();
    $myview = views_get_view($view->vid);
    if (is_object($myview)) {
      $display = (empty($view->current_display) ? 'default' : $view->current_display);
      $myview->set_display($display);
      $myview->set_items_per_page(0);
      $myview->is_cacheable = TRUE;
      $myview->execute();
      foreach ($myview->result as $result) {
        // It's possible that the rows have the same oid (ie. come from the same node)
        $results[$result->{$view->base_field}][] = $result;
      }
    }
  }
  return $results[$oid];
}

/**
 * Implementation of hook_token_values().
 */
function smsbulk_token_values($type, $object = NULL, $options = array()) {
  $tokens = array();
  if ($type == 'smsbulk_row' and !empty($object)) {
    $row = (array) $object;
    foreach ($row as $alias => $value) {
      $tokens[SMSBULK_PREFIX . $alias] = $value;
    }
  }
  return $tokens;
}

/**
 * Implementation of hook_token_list().
 */
function smsbulk_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'smsbulk_row') {
    $view =& views_get_current_view();
    if (empty($view)) {
      return $tokens;
    }
    foreach ($view->field as $field) {
      $tokens['SMS Bulk'][SMSBULK_PREFIX . $field->field_alias] =
        t("The value of @alias in the current record", array('@alias' => $field->options['label']));
    }
  }
  return $tokens;
}
