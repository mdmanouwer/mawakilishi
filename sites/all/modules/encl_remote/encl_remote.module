<?php

/**
 * @file
 * RSS Remote Enclosures module for Drupal
 *
 * Copyright (c) 2007 Eric Lloyd.
 * Drupal 6.x port 2008 Christian Zuckschwerdt.
 *
 * Licensed to you under the terms of Version 2 of the Lesser GNU General Public License.
 * See the LICENSE file in this archive for more information.
 *
 * This module is feature complete and stable. Comments and requests are welcome though!
 */

define('ENCL_REMOTE', 'encl_remote');
define('ENCL_REMOTE_PERM_SET', 'set RSS Remote Enclosure');
define('ENCL_REMOTE_PERM_ADMIN', 'administer RSS Remote Enclosures');
define('ENCL_REMOTE_NODETYPES', 'encl_remote_nodetypes');
define('ENCL_REMOTE_RSS_LINK', 'encl_remote_rss_link');
define('ENCL_REMOTE_REGISTERED_MIME_TYPES_ONLY', 'encl_remote_registered_mime_types_only');
define('ENCL_REMOTE_REGISTERED_MIME_TYPES_LIST', 'encl_remote_registered_mime_types_list');
define('ENCL_REMOTE_MIME_TYPE_EXTENSIONS', 'encl_remote_mime_type_extensions');
define('ENCL_REMOTE_WEIGHT', 'encl_remote_weight');
// TODO: tighten up to just legal characters:
define('ENCL_REMOTE_AD_HOC_MIME_TYPE_REGEX', '/^(application|audio|image|message|model|multipart|text|video|x-.+)\/.+$/');

function encl_remote_perm() {
  return array(ENCL_REMOTE_PERM_SET, ENCL_REMOTE_PERM_ADMIN);
}

function encl_remote_menu() {
  $items = array();
  $items['admin/content/encl_remote'] = array(
    'title' => 'RSS Remote Enclosures',
    'description' => 'Manage Remote Enclosures - content types, appearance, etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('encl_remote_form_admin'),
    'access callback' => 'user_access',
    'access arguments' => array(ENCL_REMOTE_PERM_ADMIN),
    'type' => MENU_NORMAL_ITEM);
  return $items;
}

// TODO: Alter the system_rss_feeds_settings form,
// instead of maintaining a discrete configuration surface
function encl_remote_form_admin($edit = array()) {
  if (!_encl_remote_autosize_supported()) {
    $form['autosize_warning'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<strong style="color: red;">',
      '#title' => t('Important Note'),
      '#suffix' => '</strong>'
    );
    $form['autosize_warning']['message'] = array(
      '#value' => t(
        "Automatic enclosure size detection relies on features not found in PHP 4. ".
        "Your users will have to enter the size of the files they're attaching by hand.<br/>".
        "One more great reason to upgrade to PHP 5 - talk to your hosting provider today!")
    );
  }
  $form[ENCL_REMOTE_NODETYPES] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed Node Types'),
    '#default_value' => variable_get(ENCL_REMOTE_NODETYPES, array()),
    '#options' => node_get_types('names'),
    '#description' => t('Select the node types you want to permit RSS Remote Enclosures for.')
  );
  $form[ENCL_REMOTE_RSS_LINK] = array(
    '#type' => 'checkbox',
    '#title' => t('Include Link in Feed'),
    '#default_value' => variable_get(ENCL_REMOTE_RSS_LINK, FALSE),
    '#description' => t('Check to include the link in the text of the feed item.')
  );
  $mime_types_only_legend = 'Restrict to registered MIME types only';
  $form[ENCL_REMOTE_REGISTERED_MIME_TYPES_ONLY] = array(
    '#type' => 'checkbox',
    '#title' => t($mime_types_only_legend),
    '#default_value' => variable_get(ENCL_REMOTE_REGISTERED_MIME_TYPES_ONLY, TRUE),
    '#description' => t('Check to restrict the MIME type field to one of the listed MIME types.')
  );
  $form[ENCL_REMOTE_REGISTERED_MIME_TYPES_LIST] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t("Registered MIME Types"),
    '#description' => t("These are the MIME types that are currently registered with RSS Remote Enclosures. If the \"$mime_types_only_legend\" option is set, these are the only MIME types allowed.")
  );
  $form[ENCL_REMOTE_REGISTERED_MIME_TYPES_LIST]['types'] = array(
    '#prefix' => '<div><ul><li>',
    '#value' => implode('</li><li>', variable_get(ENCL_REMOTE_MIME_TYPE_EXTENSIONS, NULL)),
    '#suffix' => '</li></ul></div>'
  );
  $form[ENCL_REMOTE_WEIGHT] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#delta' => '100',
    '#default_value' => variable_get(ENCL_REMOTE_WEIGHT, 30),
    '#description' => t('Default position for the RSS Remote Enclosures section relative to the rest of the node edit form.')
  );
  return system_settings_form($form);
}

function encl_remote_form_admin_submit($form_id, $form_values) {
  $form_values[ENCL_REMOTE_NODETYPES] = array_filter($form_values[ENCL_REMOTE_NODETYPES]);
  variable_set(ENCL_REMOTE_NODETYPES, $form_values[ENCL_REMOTE_NODETYPES]);
  variable_set(ENCL_REMOTE_RSS_LINK, $form_values[ENCL_REMOTE_RSS_LINK]);
  variable_set(ENCL_REMOTE_REGISTERED_MIME_TYPES_ONLY, $form_values[ENCL_REMOTE_REGISTERED_MIME_TYPES_ONLY]);
  variable_set(ENCL_REMOTE_WEIGHT, $form_values[ENCL_REMOTE_WEIGHT]);
  drupal_set_message(t('The configuration options have been saved.'));
}

function encl_remote_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if (!_encl_remote_is_nodetype_allowed($node->type)) {
    return;
  }
  $encl_remote = $node->encl_remote;

  switch ($op) {
  case 'delete':
    db_query('DELETE FROM {encl_remotes} WHERE nid = %d', $node->nid);
    break;

  case 'load':
    $encl_remote = db_fetch_object(db_query_range('SELECT * FROM {encl_remotes} er WHERE er.nid = %d', $node->nid, 0, 1));
    return array(ENCL_REMOTE => $encl_remote);
    break;

  case 'validate':
    $post = $teaser['#post'];
    if (!$post['encl_url']) {
      return;
    }
    if ($post['encl_size']) {
      if (!is_numeric($post['encl_size'])) {
        form_set_error('size', 'Size must be either numeric or blank.');
      }
    }
    else {
      if (!_encl_remote_size($post['encl_url'], $post['encl_size'])) {
        form_set_error('size', 'File size could not be automatically determined. Please specify file size.');
      }
    }
    if ($post['encl_mime_type']) {
      $mime_type = $post['encl_mime_type'];
      if (!variable_get(ENCL_REMOTE_REGISTERED_MIME_TYPES_ONLY, TRUE)) {
        if (!preg_match(ENCL_REMOTE_AD_HOC_MIME_TYPE_REGEX, $mime_type)) {
          form_set_error('mime_type', "'$mime_type' is not a valid MIME type.");
        }
      }
      else {
        $types = variable_get(ENCL_REMOTE_MIME_TYPE_EXTENSIONS, NULL);
        if (!($types && in_array($post['encl_mime_type'], $types))) {
          $type_names = implode(', ', $types);
          form_set_error('mime_type', "MIME type must be one of $type_names.");
        }
      }
    }
    break;

  case 'presave':
    $node->encl_remote = (object)array(
      'url' => $node->encl_url,
      'link_text' => $node->encl_link_text,
      'size' => $node->encl_size,
      'mime_type' => $node->encl_mime_type);
    break;

  case 'update':
  case 'insert':
    db_query('DELETE FROM {encl_remotes} WHERE nid = %d', $node->nid);
    if ($encl_remote->url) {
      db_query("INSERT INTO {encl_remotes} (nid, url, mime_type, size, link_text) VALUES (%d, '%s', '%s', %d, '%s')",
        $node->nid,
        $encl_remote->url,
        _encl_remote_mime_type($encl_remote->url, $encl_remote->mime_type),
        _encl_remote_size($encl_remote->url, $encl_remote->size),
        $encl_remote->link_text);
    }
    break;

  case 'view':
    if (variable_get(ENCL_REMOTE_RSS_LINK, FALSE)) {
      if ($teaser) {
        $node->content['teaser']['#value'] .= _encl_remote_encl_link($encl_remote);
      }
      else {
        $node->content['body']['#value'] .= _encl_remote_encl_link($encl_remote);
      }
    }
    break;

  case 'rss item':
    if ($encl_remote->url) {
      // RSS 2.0 only allows one enclosure per item
      return array(
        array(
          'key' => 'enclosure',
          'attributes' => array(
            'url' => check_url($encl_remote->url),
            'length' => $encl_remote->size,
            'type' => $encl_remote->mime_type
          )
        )
      );
    }
    break;
  }
}

function encl_remote_link($type, $node = NULL, $teaser = FALSE) {
  if ($type != 'node') {
    return;
  }
  if (!_encl_remote_is_nodetype_allowed($node->type)) {
    return;
  }
  if (!$node->encl_remote->link_text) {
    return;
  }

  $encl_remote = $node->encl_remote;

  $ret = array();
  $ret[ENCL_REMOTE] = array(
      'title' => $encl_remote->link_text,
      'href' => check_url($encl_remote->url),
      'attributes' => array('title' => t('Access the attached file')));
  return $ret;
}

function encl_remote_elements() {
  return NULL;
}

function _encl_remote_registered_mime_types_csv() {
  return implode(', ', variable_get(ENCL_REMOTE_MIME_TYPE_EXTENSIONS, NULL));
}

// returns a fully-formed link to the remote resource:
function _encl_remote_encl_link($encl_remote) {
  if ($encl_remote->url && $encl_remote->link_text) {
    return "<p><a href='$encl_remote->url'>$encl_remote->link_text</a></p>";
  }
}

function encl_remote_form_alter(&$form, $form_state, $form_id) {
  if (!isset($form['type'])) {
    return;
  }
  $form_type = $form['type']['#value'];
  if (!_encl_remote_is_nodetype_allowed($form_type)) {
    return;
  }
  if ($form_type .'_node_form' == $form_id) {
    $rss_link_text = variable_get(ENCL_REMOTE_RSS_LINK, FALSE)? ", as well as a link in the text of the RSS feed": "";
    $node = $form['#node'];
    $encl_remote = $node->encl_remote;
    $form[ENCL_REMOTE] = array(
      '#type' => 'fieldset',
      '#title' => t('RSS Remote Enclosure'),
      '#collapsible' => TRUE,
      '#collapsed' => empty($encl_remote->url),
      '#access' => user_access(ENCL_REMOTE_PERM_SET),
      '#weight' => variable_get(ENCL_REMOTE_WEIGHT, 30),
    );
    $form[ENCL_REMOTE]['encl_url'] = array(
      '#type' => 'textfield',
      '#title' => t('URL'),
      '#default_value' => $encl_remote->url,
      '#maxlength' => 255,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t("Specify the URL of a remote media resource that you would like added to this node's RSS item as an enclosure."),
    );
    $form[ENCL_REMOTE]['encl_link_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Link Text'),
      '#default_value' => $encl_remote->link_text,
      '#maxlength' => 255,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t("Text that appears here will appear below the body of the @type as a link to the remote file$rss_link_text. Leave blank to skip.", array('@type' => $form_type)),
    );
    $form[ENCL_REMOTE]['encl_size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size'),
      '#default_value' => $encl_remote->size,
      '#maxlength' => 15,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => _encl_remote_autosize_supported()?
        t("Optionally specify the size of the remote media resource. If you don't enter a value here, the remote server will be queried for the file size."):
        t("You <strong>must</strong> specify the size of the remote media resource."),
    );
      $types = _encl_remote_registered_mime_types_csv();
      $form[ENCL_REMOTE]['encl_mime_type'] = array(
      '#type' => 'textfield',
      '#title' => t('MIME Type'),
      '#default_value' => $encl_remote->mime_type,
      '#maxlength' => 30,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => variable_get(ENCL_REMOTE_REGISTERED_MIME_TYPES_ONLY, TRUE)?
        t("Specify the MIME type of the remote media resource. The only supported MIME types are @types.", array('@types' => $types)):
        t("Specify the MIME type of the remote media resource. This field may be filled in automatically for some file types."),
    );
  }
}

function _encl_remote_is_nodetype_allowed($nodetype) {
  $types = variable_get(ENCL_REMOTE_NODETYPES, array());
  return isset($types[$nodetype]) && $types[$nodetype];
}

function _encl_remote_mime_type($url, $default) {
  preg_match('/\.(\w*)$/', $url, $m);
  $encl_types = variable_get(ENCL_REMOTE_MIME_TYPE_EXTENSIONS, array());
  return $default? $default: $encl_types[$m[1]];
}

function _encl_remote_size($url, $default) {
  if ($default) {
    return $default;
  }
  if (!_encl_remote_autosize_supported()) {
    return 0;
  }
  // Kudos to Josh Finlay (josh at glamourcastle dot com) in his post here:
  // http://www.php.net/manual/en/function.filesize.php#54358
  // I've stripped out the FTP support (may be restored if needed, but I'm a bit rushed):
  $parsed = parse_url($url);
  if (($parsed['scheme'] != "http") && ($parsed['scheme'] != "https")) {
    return 0;
  }
  $headers = get_headers($url, 1);
  return (array_key_exists("Content-Length", $headers))? $headers["Content-Length"]: 0;
}

function _encl_remote_autosize_supported() {
  return function_exists('get_headers');
}
